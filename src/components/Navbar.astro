---
import BlurFade from "./magicui/blur-fade";

interface Props {
  class?: string;
}

const { class: className } = Astro.props;

const navItems = [
  { href: "#home", label: "Home" },
  { href: "#services", label: "Services" },
  { href: "#projects", label: "Projects" },
  { href: "#contact", label: "Contact" },
];
---

<header
  class:list={[
    "fixed top-0 z-50 w-full border-b border-border bg-white/80 backdrop-blur-sm",
    className,
  ]}
>
  <nav class="container mx-auto px-4 sm:px-6 lg:px-8">
    <div class="flex h-16 items-center justify-between">
      <!-- Logo -->
      <div class="flex-shrink-0">
        <a href="#home" class="text-xl font-bold text-primary"> Gulf Builders </a>
      </div>

      <!-- Desktop Navigation -->
      <div class="hidden md:flex md:items-center md:space-x-8">
        {navItems.map(({ href, label }) => (
          <a
            href={href}
            class="text-foreground/80 transition-colors hover:text-foreground"
          >
            {label}
          </a>
        ))}
      </div>

      <!-- Mobile Navigation Button -->
      <button
        type="button"
        class="inline-flex items-center justify-center rounded-md p-2 text-foreground/80 hover:bg-gray-100 hover:text-foreground focus:outline-none focus:ring-2 focus:ring-inset focus:ring-primary md:hidden"
        aria-controls="mobile-menu"
        aria-expanded="false"
        id="mobile-menu-button"
      >
        <span class="sr-only">Open main menu</span>
        <!-- Menu Icon -->
        <svg
          class="h-6 w-6"
          xmlns="http://www.w3.org/2000/svg"
          fill="none"
          viewBox="0 0 24 24"
          stroke="currentColor"
        >
          <path
            id="menu-icon-path"
            stroke-linecap="round"
            stroke-linejoin="round"
            stroke-width="2"
            d="M4 6h16M4 12h16M4 18h16"
          ></path>
        </svg>
      </button>
    </div>
  </nav>

  <!-- Mobile menu -->
  <div class="hidden md:hidden" id="mobile-menu">
    <div class="space-y-1 px-4 pb-3 pt-2">
      {navItems.map(({ href, label }) => (
        <a
          href={href}
          class="block rounded-md px-3 py-2 text-base font-medium text-foreground/80 hover:bg-gray-100 hover:text-foreground"
        >
          {label}
        </a>
      ))}
    </div>
  </div>
</header>

<script>
  const mobileMenuButton = document.getElementById("mobile-menu-button");
  const mobileMenu = document.getElementById("mobile-menu");
  const menuIconPath = document.getElementById("menu-icon-path");

  // Toggle mobile menu visibility
  mobileMenuButton?.addEventListener("click", () => {
    const expanded = mobileMenuButton.getAttribute("aria-expanded") === "true";
    mobileMenuButton.setAttribute("aria-expanded", String(!expanded));
    mobileMenu?.classList.toggle("hidden");

    // Update the menu icon
    menuIconPath?.setAttribute(
      "d",
      expanded
        ? "M4 6h16M4 12h16M4 18h16" // Hamburger icon
        : "M6 18L18 6M6 6l12 12" // Close icon
    );
  });

  // Smooth scrolling for anchor links
  document.querySelectorAll('a[href^="#"]').forEach((anchor) => {
    anchor.addEventListener("click", (e) => {
      e.preventDefault();
      const targetId = anchor.getAttribute("href");
      const targetElement = document.querySelector(targetId);

      if (targetElement) {
        // Scroll into view smoothly
        targetElement.scrollIntoView({ behavior: "smooth", block: "start" });

        // Close mobile menu after selection
        if (mobileMenu && !mobileMenu.classList.contains("hidden")) {
          mobileMenu.classList.add("hidden");
          mobileMenuButton.setAttribute("aria-expanded", "false");
          menuIconPath?.setAttribute(
            "d",
            "M4 6h16M4 12h16M4 18h16" // Reset to hamburger icon
          );
        }
      }
    });
  });
</script>